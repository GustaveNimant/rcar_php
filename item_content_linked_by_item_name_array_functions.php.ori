<?php

require_once "debug_array_functions.php";
require_once "entry_array_functions.php";
require_once "irp_functions.php";

$module = "item_content_linked_by_item_name_array_functions.php";

$Documentation[$module]['purpose'] = "to set href links for each word of an item content being an entry_surname";
$Documentation[$module]['word'] = " a word of the property content string. Example : en démocratie, la, volonté, ...";
$Documentation[$module]['word_original'] = "a word of the original item content string";
$Documentation[$module]['word_excluded'] = "words excluded are defined in an array";
$Documentation[$module]['word_filtered'] = "a word of the original item content string after exclusion";
$Documentation[$module]['word_cleaned'] = "a word of the original item content string after filtering, removing accents and capitalize. Similar to entry_name";

entering_in_module ($module);

function word_linked_excluded_array_make () {
  $here = __FUNCTION__;
  entering_in_function ($here);

  $wor_lc_a = 
    array (
	   "a",
	   "à",
	   "au",
	   "ce",
	   "celui",
	   "ces",
	   "cet",
	   "cette",
	   "dans",
	   "de",
	   "des",
	   "du",
	   "elle",
	   "elles",
	   "en",
	   "il",
	   "ils",
	   "je",
	   "la",
	   "le",
	   "les",
	   "lui",
	   "nous",
	   "on",
	   "ont",
	   "ou",
	   "par",
	   "parmi",
       "tous",
       "tout",
       "toute",
       "toutes",
	   "que",
	   "qui",
	   "un",
	   "une",
	   "",
	   );

  $wor_ca_a = string_capitalize_of_array ($wor_lc_a);

  $wor_exc_a = array_merge ($wor_ca_a, $wor_lc_a);

  debug ($here, '$wor_exc_a', $wor_exc_a);
  exiting_from_function ($here);

  return $wor_exc_a;
}


function word_original_array_of_item_name ($nam_ite) {
  $here = __FUNCTION__;
  entering_in_function ($here);

  debug_n_check ($here, "item name", $nam_ite);

  $con_by_nam_ite_a = irp_provide ('item_content_by_item_name_array', $here);
  $con_ite = $con_by_nam_ite_a[$nam_ite];
  $wor_ite_a = explode (" ", $con_ite);

  debug_n_check ($here, '$wor_ite_a', $wor_ite_a);
  exiting_from_function ($here);

  return $wor_ite_a;
}

function word_filtered_array_of_item_name ($nam_ite) {
  $here = __FUNCTION__;
   entering_in_function ($here);

   $wor_ori_a = word_original_array_of_item_name ($nam_ite);
   $wor_exc_a = word_linked_excluded_array_make ();
   
   $wor_fil_a = array ();
   foreach ($wor_ori_a as $key => $wor_ori) {
       if (!(in_array ($wor_ori, $wor_exc_a))) {
           array_push ($wor_fil_a, $wor_ori);
       }
  }
   
   debug_n_check ($here, '$wor_fil_a', $wor_fil_a);
   exiting_from_function ($here);
   
   return $wor_fil_a;
}

function word_cleaned_array_of_item_name ($nam_ite) {
    $here = __FUNCTION__;
    entering_in_function ($here);
    
    $wor_fil_a = word_filtered_array_of_item_name ($nam_ite);
    $wor_cle_a = array ();
    
    foreach ($wor_fil_a as $key => $wor_fil) {
        $wor_ite = word_remove_accents ($wor_fil, $charset='utf-8');
        $wor_ite = ucfirst ($wor_ite);
        array_push ($wor_cle_a, $wor_ite);
    }
    
    debug_n_check ($here, '$wor_cle_a', $wor_cle_a);
    exiting_from_function ($here);
    
    return $wor_cle_a;
}

function word_filtered_by_word_cleaned_array_make ($nam_ite) {
  $here = __FUNCTION__;
  entering_in_function ($here);

  $wor_fil_a = word_filtered_array_of_item_name ($nam_ite);
  $wor_cle_a = word_cleaned_array_of_item_name ($nam_ite);
 
  $fil_by_cle_a = array ();
  foreach ($wor_cle_a as $key => $wor_cle) {
    $fil_by_cle_a[$wor_cle] = $wor_fil_a[$key];
  }

  debug_n_check ($here, '$fil_by_cle_a', $fil_by_cle_a);
  exiting_from_function ($here);
 
  return $fil_by_cle_a;
}

function is_score_ok ($wor_n_nex_cle, $nam_ent) {
  $here = __FUNCTION__;
    
    $len_nam_ent = strlen ($nam_ent);         /* Volonte_generale */
    $len_wor_cle = strlen ($wor_n_nex_cle);
    $len_dif = abs ($len_nam_ent - $len_wor_cle);
    $len_min = min ($len_nam_ent, $len_wor_cle);

    /* debug ($here, "wor_cle >$wor_n_nex_cle< len_wor_cle >$len_wor_cle<", ""); */
    /* debug ($here, "nam_ent >$nam_ent< len_nam_ent >$len_nam_ent<", ""); */
    /* debug ($here, "len_dif >$len_dif<", ""); */
    /* debug ($here, "len_min >$len_min<", ""); */
    
    $boo = 
        (substr_compare ($wor_n_nex_cle, $nam_ent, 0, $len_min) == 0 )
        &&
        ($len_dif <= 1) /* plurals : may be wrong */ 
        ;
    
    /* debug ($here, '$nam_ent', $nam_ent); */
    /* debug ($here, '$wor_n_nex_cle', $wor_n_nex_cle); */
    /* debug ($here, '$boo', $boo); */
    return $boo;
}

function word_by_entry_make ($wor_cle_a, $nam_ent, $key_w, $nam_ite) {
  $here = __FUNCTION__;
  entering_in_function ($here . "(..., $nam_ent, $key_w, $nam_ite)");

  /* debug_n_check ($here, '$wor_cle_a', $wor_cle_a); */
  $wor_fil_by_wor_cle_a = word_filtered_by_word_cleaned_array_make ($nam_ite) ;
 
  $wor_cle = $wor_cle_a[$key_w];
  $wor_ori = $wor_fil_by_wor_cle_a[$wor_cle];

  $wor_cle_nex = $wor_cle_a[$key_w + 1];
  $wor_ori_nex = $wor_fil_by_wor_cle_a[$wor_cle_nex];

  $wor_n_nex_cle = $wor_cle . '_' . lcfirst ($wor_cle_nex);  /* Volonte_generale */
  $wor_n_nex_ori = $wor_ori . ' ' . $wor_ori_nex;                  /* Volonte Generale */

  debug_n_check ($here, '$wor_n_nex_cle', $wor_n_nex_cle);
  debug_n_check ($here, '$wor_n_nex_ori', $wor_n_nex_ori);

  /* debug_n_check ($here, "end wor_cle_a", end ($wor_cle_a)); */
  /* debug_n_check ($here, "key_w", $key_w); */

  debug_n_check ($here, "word current", $wor_cle);
  debug ($here, '$wor_cle_nex', $wor_cle_nex);
  debug ($here, '$wor_ori_nex', $wor_ori_nex);

  $len_cur = strlen ($wor_cle);
  $len_nex = strlen ($wor_cle_nex);

  if (is_score_ok ($wor_n_nex_cle, $nam_ent)){
    debug_n_check ($here, 'score ok for $wor_n_nex_cle', $wor_n_nex_cle);
    debug_n_check ($here, '$nam_ent', $nam_ent);
    $wor_by_ent = $wor_n_nex_ori;
  }
  else {
    $wor_by_ent = $wor_ori;
  }

  debug ($here, '$wor_by_ent', $wor_by_ent);
  exiting_from_function ($here);
 
  return $wor_by_ent;
}

function entry_name_by_word_original_to_link_of_item_name ($nam_ite) {
  $here = __FUNCTION__;
  entering_in_function ($here . "($nam_ite)");

  $nam_ent_a = irp_provide ('entry_array', $here);
  $wor_cle_a = word_cleaned_array_of_item_name ($nam_ite);

  $nam_ent_by_wor_ori_a = array();
  foreach ($wor_cle_a as $key_w => $wor_cle) {
    debug_n_check ($here, '$key_w', $key_w);
    debug_n_check ($here, '$wor_cle', $wor_cle);

    foreach ($nam_ent_a as $key_e => $nam_ent) {

      if (is_score_ok ($wor_cle, $nam_ent)){

          debug ($here, "score ok wor_cle >$wor_cle< nam_ent >$nam_ent<", "");
          
          $wor_by_ent = word_by_entry_make ($wor_cle_a, $nam_ent, $key_w, $nam_ite);

          debug ($here, "score ok str >$wor_by_ent<", "");
          $nam_ent_by_wor_ori_a[$wor_by_ent] = $nam_ent; 
      }
    }
  }

  debug ($here, '$nam_ent_by_wor_ori_a', $nam_ent_by_wor_ori_a);
  exiting_from_function ($here);

  return $nam_ent_by_wor_ori_a;
}

function word_linked_by_word_original_array_of_item_name ($nam_ite) {
  $here = __FUNCTION__;
  entering_in_function ($here . "($nam_ite)");

  $nam_ent_by_wor_ori_a = entry_name_by_word_original_to_link_of_item_name ($nam_ite);
  debug ($here, '$nam_ent_by_wor_ori_a', $nam_ent_by_wor_ori_a);

  $server = "../server/";
  $open_link_o = '<a href="';
  $open_link_f = '">';
  $close_link = '</a>';

  $lin_by_wor_a = array ();
  
  $nam_ent = irp_provide ("entry_name", $here);

  foreach ($nam_ent_by_wor_ori_a as $wor_ori => $nam_ent_cur) {
      debug ($here, '$wor_ori', $wor_ori);
      if ($nam_ent <> $nam_ent_cur) {
          $fil_cle_a = word_filtered_by_word_cleaned_array_make ($nam_ite);
          
          $pro_lis = 'entry.php';
          
          $link  = '';
          $link .= $open_link_o;
          $link .= $pro_lis . '?entry_name=' . $nam_ent_cur;
          $link .= $open_link_f;
          $link .= $wor_ori;
          $link .= $close_link;
          
          $lin_by_wor_a[$wor_ori] = $link;
      }
  }

  debug ($here, '$lin_by_wor_a', $lin_by_wor_a);
  exiting_from_function ($here);
 
  return $lin_by_wor_a;
}

function replace_words_by_links_in_item_content_of_item_name ($nam_ite) {
  $here = __FUNCTION__;
  entering_in_function ($here);

  $con_by_nam_ite_a = irp_provide ('item_content_by_item_name_array', $here); 
  $con_ite = $con_by_nam_ite_a[$nam_ite];
  
  $lin_by_wor_a = word_linked_by_word_original_array_of_item_name ($nam_ite);

  foreach ($lin_by_wor_a as $key => $val) {
    $con_ite = str_replace ($key, $val, $con_ite);
  }
  
  debug_n_check ($here, '$con_ite', $con_ite);
  exiting_from_function ($here);
  
  return $con_ite;
  
}

function item_content_linked_by_item_name_array_build () {
  $here = __FUNCTION__;
  entering_in_function ($here);

  $con_by_nam_ite_a = irp_provide ('item_content_by_item_name_array', $here);
  
  foreach ($con_by_nam_ite_a as $nam_ite => $con_ite) {
    $wor_lin_by_nam_ite_a [$nam_ite] = replace_words_by_links_in_item_content_of_item_name ($nam_ite);
  }

  debug ($here, '$wor_lin_by_nam_ite_a', $wor_lin_by_nam_ite_a);
  exiting_from_function ($here);
  
  return $wor_lin_by_nam_ite_a;
}

exiting_from_module ($module);

/* 

pour chaque mot du contenu d'un item
* transformer le mot original en mot "clean" ou l'exclure
* le comparer avec une entrée existante (is_score_ok) avec grep sur nam_ent_a
* si ce mot est lié à l'entrée créer un lien 

 */
?>
